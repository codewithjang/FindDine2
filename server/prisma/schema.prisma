// ------------------------------------------------------
// Prisma Schema for FindDine Backend
// Database: MySQL
// ------------------------------------------------------

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ------------------------------------------------------
// üß© MODEL: restaurant
// ------------------------------------------------------

model restaurant {
  id               Int              @id @default(autoincrement())
  restaurantName   String
  foodType         String
  email            String           @unique(map: "Restaurant_email_key")
  password         String
  address          String
  phone            String
  description      String?
  latitude         Float?
  longitude        Float?
  nearbyPlaces     String?
  facilities       String?          @db.LongText
  paymentOptions   String?          @db.LongText
  serviceOptions   String?          @db.LongText
  locationStyles   String?          @db.LongText
  lifestyles       String?          @db.LongText
  photos           String?          @db.LongText
  priceRange       String?          @db.VarChar(50)
  startingPrice    Int?

  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @default(now()) @updatedAt

  // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡πÅ‡∏ö‡∏ö one-to-one ‡∏Å‡∏±‡∏ö bookingSetting
  bookingSetting   bookingSetting?

  @@map("restaurant")
}

// ------------------------------------------------------
// üß© MODEL: bookingSetting (‡∏ï‡∏≤‡∏£‡∏≤‡∏á BookingSetting ‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô MySQL)
// ------------------------------------------------------

model bookingSetting {
  id             Int         @id @default(autoincrement())
  restaurantId   Int         @unique
  allowBooking   Boolean     @default(true)
  maxGuests      Int?
  tableCount     Int?
  advanceDays    Int?
  holdMinutes    Int?
  cancelBeforeHr Int?
  openTime       String
  closeTime      String
  policyNotes    String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö restaurant.id
  restaurant     restaurant  @relation(fields: [restaurantId], references: [id], onDelete: Cascade)

  @@map("BookingSetting") // ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ï‡∏±‡∏ß B ‡πÉ‡∏´‡∏ç‡πà)
}

// ------------------------------------------------------
// üß© MODEL: user
// ------------------------------------------------------

model user {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique(map: "User_email_key")
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime
}